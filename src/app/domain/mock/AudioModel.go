// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kujilabo/cocotola-synthesizer-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// AudioModel is an autogenerated mock type for the AudioModel type
type AudioModel struct {
	mock.Mock
}

// GetContent provides a mock function with given fields:
func (_m *AudioModel) GetContent() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *AudioModel) GetID() uint {
	ret := _m.Called()

	var r0 uint
	if rf, ok := ret.Get(0).(func() uint); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint)
	}

	return r0
}

// GetLang5 provides a mock function with given fields:
func (_m *AudioModel) GetLang5() domain.Lang5 {
	ret := _m.Called()

	var r0 domain.Lang5
	if rf, ok := ret.Get(0).(func() domain.Lang5); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Lang5)
		}
	}

	return r0
}

// GetText provides a mock function with given fields:
func (_m *AudioModel) GetText() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewAudioModel creates a new instance of AudioModel. It also registers a cleanup function to assert the mocks expectations.
func NewAudioModel(t testing.TB) *AudioModel {
	mock := &AudioModel{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
