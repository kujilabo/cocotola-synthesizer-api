// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kujilabo/cocotola-synthesizer-api/src/app/domain"
	mock "github.com/stretchr/testify/mock"

	service "github.com/kujilabo/cocotola-synthesizer-api/src/app/service"

	testing "testing"
)

// AudioRepository is an autogenerated mock type for the AudioRepository type
type AudioRepository struct {
	mock.Mock
}

// AddAudio provides a mock function with given fields: ctx, lang5, text, audioContent
func (_m *AudioRepository) AddAudio(ctx context.Context, lang5 domain.Lang5, text string, audioContent string) (domain.AudioID, error) {
	ret := _m.Called(ctx, lang5, text, audioContent)

	var r0 domain.AudioID
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang5, string, string) domain.AudioID); ok {
		r0 = rf(ctx, lang5, text, audioContent)
	} else {
		r0 = ret.Get(0).(domain.AudioID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang5, string, string) error); ok {
		r1 = rf(ctx, lang5, text, audioContent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAudioByAudioID provides a mock function with given fields: ctx, audioID
func (_m *AudioRepository) FindAudioByAudioID(ctx context.Context, audioID domain.AudioID) (service.Audio, error) {
	ret := _m.Called(ctx, audioID)

	var r0 service.Audio
	if rf, ok := ret.Get(0).(func(context.Context, domain.AudioID) service.Audio); ok {
		r0 = rf(ctx, audioID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Audio)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.AudioID) error); ok {
		r1 = rf(ctx, audioID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAudioIDByText provides a mock function with given fields: ctx, lang5, text
func (_m *AudioRepository) FindAudioIDByText(ctx context.Context, lang5 domain.Lang5, text string) (domain.AudioID, error) {
	ret := _m.Called(ctx, lang5, text)

	var r0 domain.AudioID
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang5, string) domain.AudioID); ok {
		r0 = rf(ctx, lang5, text)
	} else {
		r0 = ret.Get(0).(domain.AudioID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang5, string) error); ok {
		r1 = rf(ctx, lang5, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByLangAndText provides a mock function with given fields: ctx, lang5, text
func (_m *AudioRepository) FindByLangAndText(ctx context.Context, lang5 domain.Lang5, text string) (service.Audio, error) {
	ret := _m.Called(ctx, lang5, text)

	var r0 service.Audio
	if rf, ok := ret.Get(0).(func(context.Context, domain.Lang5, string) service.Audio); ok {
		r0 = rf(ctx, lang5, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.Audio)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Lang5, string) error); ok {
		r1 = rf(ctx, lang5, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAudioRepository creates a new instance of AudioRepository. It also registers a cleanup function to assert the mocks expectations.
func NewAudioRepository(t testing.TB) *AudioRepository {
	mock := &AudioRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
